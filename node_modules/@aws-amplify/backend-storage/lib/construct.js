import { Construct } from 'constructs';
import { Bucket, HttpMethods, } from 'aws-cdk-lib/aws-s3';
import { storageOutputKey, } from '@aws-amplify/backend-output-schemas';
import { RemovalPolicy, Stack } from 'aws-cdk-lib';
import { AttributionMetadataStorage, StackMetadataBackendOutputStorageStrategy, } from '@aws-amplify/backend-output-storage';
import { fileURLToPath } from 'url';
import { S3EventSourceV2 } from 'aws-cdk-lib/aws-lambda-event-sources';
// Be very careful editing this value. It is the string that is used to attribute stacks to Amplify Storage in BI metrics
const storageStackType = 'storage-S3';
/**
 * Amplify Storage CDK Construct
 *
 * Currently just a thin wrapper around an S3 bucket
 */
export class AmplifyStorage extends Construct {
    resources;
    /**
     * Create a new AmplifyStorage instance
     */
    constructor(scope, id, props) {
        super(scope, id);
        const bucketProps = {
            versioned: props.versioned || false,
            cors: [
                {
                    maxAge: 3000,
                    exposedHeaders: [
                        'x-amz-server-side-encryption',
                        'x-amz-request-id',
                        'x-amz-id-2',
                        'ETag',
                    ],
                    allowedHeaders: ['*'],
                    allowedOrigins: ['*'],
                    allowedMethods: [
                        HttpMethods.GET,
                        HttpMethods.HEAD,
                        HttpMethods.PUT,
                        HttpMethods.POST,
                        HttpMethods.DELETE,
                    ],
                },
            ],
            autoDeleteObjects: true,
            removalPolicy: RemovalPolicy.DESTROY,
        };
        const bucket = new Bucket(this, 'Bucket', bucketProps);
        this.resources = {
            bucket,
            cfnResources: {
                cfnBucket: bucket.node.findChild('Resource'),
            },
        };
        this.storeOutput(props.outputStorageStrategy);
        new AttributionMetadataStorage().storeAttributionMetadata(Stack.of(this), storageStackType, fileURLToPath(new URL('../package.json', import.meta.url)));
    }
    /**
     * Attach a Lambda function trigger handler to the S3 events
     * @param events - list of S3 events that will trigger the handler
     * @param handler - The function that will handle the event
     */
    addTrigger = (events, handler) => {
        handler.addEventSource(new S3EventSourceV2(this.resources.bucket, { events }));
    };
    /**
     * Store storage outputs using provided strategy
     */
    storeOutput = (outputStorageStrategy = new StackMetadataBackendOutputStorageStrategy(Stack.of(this))) => {
        outputStorageStrategy.addBackendOutputEntry(storageOutputKey, {
            version: '1',
            payload: {
                storageRegion: Stack.of(this).region,
                bucketName: this.resources.bucket.bucketName,
            },
        });
    };
}
//# sourceMappingURL=data:application/json;base64,