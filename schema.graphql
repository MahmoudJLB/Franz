schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Mutation {
  createTranscription(input: CreateTranscriptionInput!): Transcription
  deleteTranscription(input: DeleteTranscriptionInput!): Transcription
  updateTranscription(input: UpdateTranscriptionInput!): Transcription
}

type Query {
  getTranscription(account_id: String!, transcription_id: String!): Transcription
  listTranscriptions(filter: TableTranscriptionFilterInput, limit: Int, nextToken: String): TranscriptionConnection
}

type Subscription {
  onCreateTranscription(account_id: String, s3_bucket: AWSURL, title: String, transcription_date: String, transcription_id: String): Transcription @aws_subscribe(mutations : ["createTranscription"])
  onDeleteTranscription(account_id: String, s3_bucket: AWSURL, title: String, transcription_date: String, transcription_id: String): Transcription @aws_subscribe(mutations : ["deleteTranscription"])
  onUpdateTranscription(account_id: String, s3_bucket: AWSURL, title: String, transcription_date: String, transcription_id: String): Transcription @aws_subscribe(mutations : ["updateTranscription"])
}

type Transcription {
  account_id: String!
  metadata: AWSJSON
  s3_bucket: AWSURL!
  title: String!
  transcription_date: String!
  transcription_id: String!
}

type TranscriptionConnection {
  items: [Transcription]
  nextToken: String
}

input CreateTranscriptionInput {
  account_id: String!
  metadata: AWSJSON
  s3_bucket: AWSURL!
  title: String!
  transcription_date: String!
  transcription_id: String!
}

input DeleteTranscriptionInput {
  account_id: String!
  transcription_id: String!
}

input ModelSizeInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input TableBooleanFilterInput {
  attributeExists: Boolean
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  attributeExists: Boolean
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input TableIDFilterInput {
  attributeExists: Boolean
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: ModelSizeInput
}

input TableIntFilterInput {
  attributeExists: Boolean
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input TableStringFilterInput {
  attributeExists: Boolean
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: ModelSizeInput
}

input TableTranscriptionFilterInput {
  account_id: TableStringFilterInput
  s3_bucket: TableStringFilterInput
  title: TableStringFilterInput
  transcription_date: TableStringFilterInput
  transcription_id: TableStringFilterInput
}

input UpdateTranscriptionInput {
  account_id: String!
  metadata: AWSJSON
  s3_bucket: AWSURL
  title: String
  transcription_date: String
  transcription_id: String!
}
