import { fileURLToPath } from 'url';
import { SandboxCommand, } from './sandbox_command.js';
import { SandboxSingletonFactory } from '@aws-amplify/sandbox';
import { SandboxDeleteCommand } from './sandbox-delete/sandbox_delete_command.js';
import { SandboxBackendIdResolver } from './sandbox_id_resolver.js';
import { ClientConfigGeneratorAdapter } from '../../client-config/client_config_generator_adapter.js';
import { LocalNamespaceResolver } from '../../backend-identifier/local_namespace_resolver.js';
import { createSandboxSecretCommand } from './sandbox-secret/sandbox_secret_command_factory.js';
import { PackageJsonReader, UsageDataEmitterFactory, } from '@aws-amplify/platform-core';
import { SandboxEventHandlerFactory } from './sandbox_event_handler_factory.js';
import { CommandMiddleware } from '../../command_middleware.js';
import { format, printer } from '@aws-amplify/cli-core';
import { S3Client } from '@aws-sdk/client-s3';
import { AmplifyClient } from '@aws-sdk/client-amplify';
import { CloudFormationClient } from '@aws-sdk/client-cloudformation';
/**
 * Creates wired sandbox command.
 */
export const createSandboxCommand = () => {
    const sandboxBackendIdPartsResolver = new SandboxBackendIdResolver(new LocalNamespaceResolver(new PackageJsonReader()));
    const sandboxFactory = new SandboxSingletonFactory(sandboxBackendIdPartsResolver.resolve, printer, format);
    const s3Client = new S3Client();
    const amplifyClient = new AmplifyClient();
    const cloudFormationClient = new CloudFormationClient();
    const awsClientProvider = {
        getS3Client: () => s3Client,
        getAmplifyClient: () => amplifyClient,
        getCloudFormationClient: () => cloudFormationClient,
    };
    const clientConfigGeneratorAdapter = new ClientConfigGeneratorAdapter(awsClientProvider);
    const libraryVersion = new PackageJsonReader().read(fileURLToPath(new URL('../../../package.json', import.meta.url))).version ?? '';
    const eventHandlerFactory = new SandboxEventHandlerFactory(sandboxBackendIdPartsResolver.resolve, async () => await new UsageDataEmitterFactory().getInstance(libraryVersion));
    const commandMiddleWare = new CommandMiddleware(printer);
    return new SandboxCommand(sandboxFactory, [new SandboxDeleteCommand(sandboxFactory), createSandboxSecretCommand()], clientConfigGeneratorAdapter, commandMiddleWare, eventHandlerFactory.getSandboxEventHandlers);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9jb21tYW5kX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvc2FuZGJveC9zYW5kYm94X2NvbW1hbmRfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBQ3BDLE9BQU8sRUFDTCxjQUFjLEdBRWYsTUFBTSxzQkFBc0IsQ0FBQztBQUM5QixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUNsRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUN0RyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUM5RixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUNoRyxPQUFPLEVBQ0wsaUJBQWlCLEVBQ2pCLHVCQUF1QixHQUN4QixNQUFNLDRCQUE0QixDQUFDO0FBQ3BDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUV0RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLEdBR2xDLEVBQUU7SUFDRixNQUFNLDZCQUE2QixHQUFHLElBQUksd0JBQXdCLENBQ2hFLElBQUksc0JBQXNCLENBQUMsSUFBSSxpQkFBaUIsRUFBRSxDQUFDLENBQ3BELENBQUM7SUFFRixNQUFNLGNBQWMsR0FBRyxJQUFJLHVCQUF1QixDQUNoRCw2QkFBNkIsQ0FBQyxPQUFPLEVBQ3JDLE9BQU8sRUFDUCxNQUFNLENBQ1AsQ0FBQztJQUNGLE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7SUFDaEMsTUFBTSxhQUFhLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQztJQUMxQyxNQUFNLG9CQUFvQixHQUFHLElBQUksb0JBQW9CLEVBQUUsQ0FBQztJQUV4RCxNQUFNLGlCQUFpQixHQUFHO1FBQ3hCLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxRQUFRO1FBQzNCLGdCQUFnQixFQUFFLEdBQUcsRUFBRSxDQUFDLGFBQWE7UUFDckMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFLENBQUMsb0JBQW9CO0tBQ3BELENBQUM7SUFDRixNQUFNLDRCQUE0QixHQUFHLElBQUksNEJBQTRCLENBQ25FLGlCQUFpQixDQUNsQixDQUFDO0lBRUYsTUFBTSxjQUFjLEdBQ2xCLElBQUksaUJBQWlCLEVBQUUsQ0FBQyxJQUFJLENBQzFCLGFBQWEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQ2pFLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUVsQixNQUFNLG1CQUFtQixHQUFHLElBQUksMEJBQTBCLENBQ3hELDZCQUE2QixDQUFDLE9BQU8sRUFDckMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxNQUFNLElBQUksdUJBQXVCLEVBQUUsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQzVFLENBQUM7SUFFRixNQUFNLGlCQUFpQixHQUFHLElBQUksaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekQsT0FBTyxJQUFJLGNBQWMsQ0FDdkIsY0FBYyxFQUNkLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxjQUFjLENBQUMsRUFBRSwwQkFBMEIsRUFBRSxDQUFDLEVBQ3hFLDRCQUE0QixFQUM1QixpQkFBaUIsRUFDakIsbUJBQW1CLENBQUMsdUJBQXVCLENBQzVDLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tYW5kTW9kdWxlIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ3VybCc7XG5pbXBvcnQge1xuICBTYW5kYm94Q29tbWFuZCxcbiAgU2FuZGJveENvbW1hbmRPcHRpb25zS2ViYWJDYXNlLFxufSBmcm9tICcuL3NhbmRib3hfY29tbWFuZC5qcyc7XG5pbXBvcnQgeyBTYW5kYm94U2luZ2xldG9uRmFjdG9yeSB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9zYW5kYm94JztcbmltcG9ydCB7IFNhbmRib3hEZWxldGVDb21tYW5kIH0gZnJvbSAnLi9zYW5kYm94LWRlbGV0ZS9zYW5kYm94X2RlbGV0ZV9jb21tYW5kLmpzJztcbmltcG9ydCB7IFNhbmRib3hCYWNrZW5kSWRSZXNvbHZlciB9IGZyb20gJy4vc2FuZGJveF9pZF9yZXNvbHZlci5qcyc7XG5pbXBvcnQgeyBDbGllbnRDb25maWdHZW5lcmF0b3JBZGFwdGVyIH0gZnJvbSAnLi4vLi4vY2xpZW50LWNvbmZpZy9jbGllbnRfY29uZmlnX2dlbmVyYXRvcl9hZGFwdGVyLmpzJztcbmltcG9ydCB7IExvY2FsTmFtZXNwYWNlUmVzb2x2ZXIgfSBmcm9tICcuLi8uLi9iYWNrZW5kLWlkZW50aWZpZXIvbG9jYWxfbmFtZXNwYWNlX3Jlc29sdmVyLmpzJztcbmltcG9ydCB7IGNyZWF0ZVNhbmRib3hTZWNyZXRDb21tYW5kIH0gZnJvbSAnLi9zYW5kYm94LXNlY3JldC9zYW5kYm94X3NlY3JldF9jb21tYW5kX2ZhY3RvcnkuanMnO1xuaW1wb3J0IHtcbiAgUGFja2FnZUpzb25SZWFkZXIsXG4gIFVzYWdlRGF0YUVtaXR0ZXJGYWN0b3J5LFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBTYW5kYm94RXZlbnRIYW5kbGVyRmFjdG9yeSB9IGZyb20gJy4vc2FuZGJveF9ldmVudF9oYW5kbGVyX2ZhY3RvcnkuanMnO1xuaW1wb3J0IHsgQ29tbWFuZE1pZGRsZXdhcmUgfSBmcm9tICcuLi8uLi9jb21tYW5kX21pZGRsZXdhcmUuanMnO1xuaW1wb3J0IHsgZm9ybWF0LCBwcmludGVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaS1jb3JlJztcbmltcG9ydCB7IFMzQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LXMzJztcbmltcG9ydCB7IEFtcGxpZnlDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtYW1wbGlmeSc7XG5pbXBvcnQgeyBDbG91ZEZvcm1hdGlvbkNsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1jbG91ZGZvcm1hdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyB3aXJlZCBzYW5kYm94IGNvbW1hbmQuXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVTYW5kYm94Q29tbWFuZCA9ICgpOiBDb21tYW5kTW9kdWxlPFxuICBvYmplY3QsXG4gIFNhbmRib3hDb21tYW5kT3B0aW9uc0tlYmFiQ2FzZVxuPiA9PiB7XG4gIGNvbnN0IHNhbmRib3hCYWNrZW5kSWRQYXJ0c1Jlc29sdmVyID0gbmV3IFNhbmRib3hCYWNrZW5kSWRSZXNvbHZlcihcbiAgICBuZXcgTG9jYWxOYW1lc3BhY2VSZXNvbHZlcihuZXcgUGFja2FnZUpzb25SZWFkZXIoKSlcbiAgKTtcblxuICBjb25zdCBzYW5kYm94RmFjdG9yeSA9IG5ldyBTYW5kYm94U2luZ2xldG9uRmFjdG9yeShcbiAgICBzYW5kYm94QmFja2VuZElkUGFydHNSZXNvbHZlci5yZXNvbHZlLFxuICAgIHByaW50ZXIsXG4gICAgZm9ybWF0XG4gICk7XG4gIGNvbnN0IHMzQ2xpZW50ID0gbmV3IFMzQ2xpZW50KCk7XG4gIGNvbnN0IGFtcGxpZnlDbGllbnQgPSBuZXcgQW1wbGlmeUNsaWVudCgpO1xuICBjb25zdCBjbG91ZEZvcm1hdGlvbkNsaWVudCA9IG5ldyBDbG91ZEZvcm1hdGlvbkNsaWVudCgpO1xuXG4gIGNvbnN0IGF3c0NsaWVudFByb3ZpZGVyID0ge1xuICAgIGdldFMzQ2xpZW50OiAoKSA9PiBzM0NsaWVudCxcbiAgICBnZXRBbXBsaWZ5Q2xpZW50OiAoKSA9PiBhbXBsaWZ5Q2xpZW50LFxuICAgIGdldENsb3VkRm9ybWF0aW9uQ2xpZW50OiAoKSA9PiBjbG91ZEZvcm1hdGlvbkNsaWVudCxcbiAgfTtcbiAgY29uc3QgY2xpZW50Q29uZmlnR2VuZXJhdG9yQWRhcHRlciA9IG5ldyBDbGllbnRDb25maWdHZW5lcmF0b3JBZGFwdGVyKFxuICAgIGF3c0NsaWVudFByb3ZpZGVyXG4gICk7XG5cbiAgY29uc3QgbGlicmFyeVZlcnNpb24gPVxuICAgIG5ldyBQYWNrYWdlSnNvblJlYWRlcigpLnJlYWQoXG4gICAgICBmaWxlVVJMVG9QYXRoKG5ldyBVUkwoJy4uLy4uLy4uL3BhY2thZ2UuanNvbicsIGltcG9ydC5tZXRhLnVybCkpXG4gICAgKS52ZXJzaW9uID8/ICcnO1xuXG4gIGNvbnN0IGV2ZW50SGFuZGxlckZhY3RvcnkgPSBuZXcgU2FuZGJveEV2ZW50SGFuZGxlckZhY3RvcnkoXG4gICAgc2FuZGJveEJhY2tlbmRJZFBhcnRzUmVzb2x2ZXIucmVzb2x2ZSxcbiAgICBhc3luYyAoKSA9PiBhd2FpdCBuZXcgVXNhZ2VEYXRhRW1pdHRlckZhY3RvcnkoKS5nZXRJbnN0YW5jZShsaWJyYXJ5VmVyc2lvbilcbiAgKTtcblxuICBjb25zdCBjb21tYW5kTWlkZGxlV2FyZSA9IG5ldyBDb21tYW5kTWlkZGxld2FyZShwcmludGVyKTtcbiAgcmV0dXJuIG5ldyBTYW5kYm94Q29tbWFuZChcbiAgICBzYW5kYm94RmFjdG9yeSxcbiAgICBbbmV3IFNhbmRib3hEZWxldGVDb21tYW5kKHNhbmRib3hGYWN0b3J5KSwgY3JlYXRlU2FuZGJveFNlY3JldENvbW1hbmQoKV0sXG4gICAgY2xpZW50Q29uZmlnR2VuZXJhdG9yQWRhcHRlcixcbiAgICBjb21tYW5kTWlkZGxlV2FyZSxcbiAgICBldmVudEhhbmRsZXJGYWN0b3J5LmdldFNhbmRib3hFdmVudEhhbmRsZXJzXG4gICk7XG59O1xuIl19