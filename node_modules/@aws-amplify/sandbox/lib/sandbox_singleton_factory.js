import { PackageManagerControllerFactory, } from '@aws-amplify/cli-core';
import { FileWatchingSandbox } from './file_watching_sandbox.js';
import { BackendDeployerFactory } from '@aws-amplify/backend-deployer';
import { AmplifySandboxExecutor } from './sandbox_executor.js';
import { CloudFormationClient } from '@aws-sdk/client-cloudformation';
import { getSecretClient } from '@aws-amplify/backend-secret';
/**
 * Factory to create a new sandbox
 */
export class SandboxSingletonFactory {
    sandboxIdResolver;
    printer;
    format;
    instance;
    /**
     * sandboxIdResolver allows sandbox to lazily load the sandbox backend id on demand
     */
    constructor(sandboxIdResolver, printer, format) {
        this.sandboxIdResolver = sandboxIdResolver;
        this.printer = printer;
        this.format = format;
    }
    /**
     * Returns a singleton instance of a Sandbox
     */
    getInstance = async () => {
        if (!this.instance) {
            const packageManagerControllerFactory = new PackageManagerControllerFactory(process.cwd(), this.printer);
            const backendDeployerFactory = new BackendDeployerFactory(packageManagerControllerFactory.getPackageManagerController(), this.format);
            this.instance = new FileWatchingSandbox(this.sandboxIdResolver, new AmplifySandboxExecutor(backendDeployerFactory.getInstance(), getSecretClient(), this.printer), new CloudFormationClient(), this.printer);
        }
        return this.instance;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9zaW5nbGV0b25fZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zYW5kYm94X3NpbmdsZXRvbl9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCwrQkFBK0IsR0FFaEMsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVqRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN2RSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN0RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFOUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sdUJBQXVCO0lBTWY7SUFDQTtJQUNBO0lBUFgsUUFBUSxDQUFzQjtJQUN0Qzs7T0FFRztJQUNILFlBQ21CLGlCQUEyQyxFQUMzQyxPQUFnQixFQUNoQixNQUFjO1FBRmQsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUEwQjtRQUMzQyxZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQ2hCLFdBQU0sR0FBTixNQUFNLENBQVE7SUFDOUIsQ0FBQztJQUVKOztPQUVHO0lBQ0gsV0FBVyxHQUFHLEtBQUssSUFBc0IsRUFBRTtRQUN6QyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixNQUFNLCtCQUErQixHQUNuQyxJQUFJLCtCQUErQixDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbkUsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLHNCQUFzQixDQUN2RCwrQkFBK0IsQ0FBQywyQkFBMkIsRUFBRSxFQUM3RCxJQUFJLENBQUMsTUFBTSxDQUNaLENBQUM7WUFDRixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksbUJBQW1CLENBQ3JDLElBQUksQ0FBQyxpQkFBaUIsRUFDdEIsSUFBSSxzQkFBc0IsQ0FDeEIsc0JBQXNCLENBQUMsV0FBVyxFQUFFLEVBQ3BDLGVBQWUsRUFBRSxFQUNqQixJQUFJLENBQUMsT0FBTyxDQUNiLEVBQ0QsSUFBSSxvQkFBb0IsRUFBRSxFQUMxQixJQUFJLENBQUMsT0FBTyxDQUNiLENBQUM7U0FDSDtRQUNELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEZvcm1hdCxcbiAgUGFja2FnZU1hbmFnZXJDb250cm9sbGVyRmFjdG9yeSxcbiAgUHJpbnRlcixcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaS1jb3JlJztcbmltcG9ydCB7IEZpbGVXYXRjaGluZ1NhbmRib3ggfSBmcm9tICcuL2ZpbGVfd2F0Y2hpbmdfc2FuZGJveC5qcyc7XG5pbXBvcnQgeyBCYWNrZW5kSWRTYW5kYm94UmVzb2x2ZXIsIFNhbmRib3ggfSBmcm9tICcuL3NhbmRib3guanMnO1xuaW1wb3J0IHsgQmFja2VuZERlcGxveWVyRmFjdG9yeSB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLWRlcGxveWVyJztcbmltcG9ydCB7IEFtcGxpZnlTYW5kYm94RXhlY3V0b3IgfSBmcm9tICcuL3NhbmRib3hfZXhlY3V0b3IuanMnO1xuaW1wb3J0IHsgQ2xvdWRGb3JtYXRpb25DbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtY2xvdWRmb3JtYXRpb24nO1xuaW1wb3J0IHsgZ2V0U2VjcmV0Q2xpZW50IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtc2VjcmV0JztcblxuLyoqXG4gKiBGYWN0b3J5IHRvIGNyZWF0ZSBhIG5ldyBzYW5kYm94XG4gKi9cbmV4cG9ydCBjbGFzcyBTYW5kYm94U2luZ2xldG9uRmFjdG9yeSB7XG4gIHByaXZhdGUgaW5zdGFuY2U6IFNhbmRib3ggfCB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBzYW5kYm94SWRSZXNvbHZlciBhbGxvd3Mgc2FuZGJveCB0byBsYXppbHkgbG9hZCB0aGUgc2FuZGJveCBiYWNrZW5kIGlkIG9uIGRlbWFuZFxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBzYW5kYm94SWRSZXNvbHZlcjogQmFja2VuZElkU2FuZGJveFJlc29sdmVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJpbnRlcjogUHJpbnRlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IGZvcm1hdDogRm9ybWF0XG4gICkge31cblxuICAvKipcbiAgICogUmV0dXJucyBhIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiBhIFNhbmRib3hcbiAgICovXG4gIGdldEluc3RhbmNlID0gYXN5bmMgKCk6IFByb21pc2U8U2FuZGJveD4gPT4ge1xuICAgIGlmICghdGhpcy5pbnN0YW5jZSkge1xuICAgICAgY29uc3QgcGFja2FnZU1hbmFnZXJDb250cm9sbGVyRmFjdG9yeSA9XG4gICAgICAgIG5ldyBQYWNrYWdlTWFuYWdlckNvbnRyb2xsZXJGYWN0b3J5KHByb2Nlc3MuY3dkKCksIHRoaXMucHJpbnRlcik7XG4gICAgICBjb25zdCBiYWNrZW5kRGVwbG95ZXJGYWN0b3J5ID0gbmV3IEJhY2tlbmREZXBsb3llckZhY3RvcnkoXG4gICAgICAgIHBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckZhY3RvcnkuZ2V0UGFja2FnZU1hbmFnZXJDb250cm9sbGVyKCksXG4gICAgICAgIHRoaXMuZm9ybWF0XG4gICAgICApO1xuICAgICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBGaWxlV2F0Y2hpbmdTYW5kYm94KFxuICAgICAgICB0aGlzLnNhbmRib3hJZFJlc29sdmVyLFxuICAgICAgICBuZXcgQW1wbGlmeVNhbmRib3hFeGVjdXRvcihcbiAgICAgICAgICBiYWNrZW5kRGVwbG95ZXJGYWN0b3J5LmdldEluc3RhbmNlKCksXG4gICAgICAgICAgZ2V0U2VjcmV0Q2xpZW50KCksXG4gICAgICAgICAgdGhpcy5wcmludGVyXG4gICAgICAgICksXG4gICAgICAgIG5ldyBDbG91ZEZvcm1hdGlvbkNsaWVudCgpLFxuICAgICAgICB0aGlzLnByaW50ZXJcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmluc3RhbmNlO1xuICB9O1xufVxuIl19