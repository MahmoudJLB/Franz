import { format, printer } from '@aws-amplify/cli-core';
/**
 * Command to list sandbox secrets.
 */
export class SandboxSecretListCommand {
    sandboxIdResolver;
    secretClient;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * List sandbox secret command.
     */
    constructor(sandboxIdResolver, secretClient) {
        this.sandboxIdResolver = sandboxIdResolver;
        this.secretClient = secretClient;
        this.command = 'list';
        this.describe = 'List all sandbox secrets';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const sandboxBackendIdentifier = await this.sandboxIdResolver.resolve(args.identifier);
        const secrets = await this.secretClient.listSecrets(sandboxBackendIdentifier);
        if (secrets.length > 0) {
            printer.print(format.list(secrets.map((secret) => secret.name)));
        }
        else {
            printer.print(`No sandbox secrets found. To create a secret use ${format.command('amplify sandbox secret set <secret-name>')}.`);
        }
        printer.printNewLine();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9zZWNyZXRfbGlzdF9jb21tYW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbW1hbmRzL3NhbmRib3gvc2FuZGJveC1zZWNyZXQvc2FuZGJveF9zZWNyZXRfbGlzdF9jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFJeEQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sd0JBQXdCO0lBa0JoQjtJQUNBO0lBZm5COztPQUVHO0lBQ00sT0FBTyxDQUFTO0lBRXpCOztPQUVHO0lBQ00sUUFBUSxDQUFTO0lBRTFCOztPQUVHO0lBQ0gsWUFDbUIsaUJBQTJDLEVBQzNDLFlBQTBCO1FBRDFCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBMEI7UUFDM0MsaUJBQVksR0FBWixZQUFZLENBQWM7UUFFM0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRywwQkFBMEIsQ0FBQztJQUM3QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxPQUFPLEdBQUcsS0FBSyxFQUNiLElBQXFELEVBQ3RDLEVBQUU7UUFDakIsTUFBTSx3QkFBd0IsR0FBRyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQ25FLElBQUksQ0FBQyxVQUFVLENBQ2hCLENBQUM7UUFDRixNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUNqRCx3QkFBd0IsQ0FDekIsQ0FBQztRQUVGLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbEU7YUFBTTtZQUNMLE9BQU8sQ0FBQyxLQUFLLENBQ1gsb0RBQW9ELE1BQU0sQ0FBQyxPQUFPLENBQ2hFLDBDQUEwQyxDQUMzQyxHQUFHLENBQ0wsQ0FBQztTQUNIO1FBQ0QsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3pCLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXJndW1lbnRzQ2FtZWxDYXNlLCBDb21tYW5kTW9kdWxlIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgU2VjcmV0Q2xpZW50IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtc2VjcmV0JztcbmltcG9ydCB7IFNhbmRib3hCYWNrZW5kSWRSZXNvbHZlciB9IGZyb20gJy4uL3NhbmRib3hfaWRfcmVzb2x2ZXIuanMnO1xuaW1wb3J0IHsgZm9ybWF0LCBwcmludGVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaS1jb3JlJztcbmltcG9ydCB7IEFyZ3VtZW50c0tlYmFiQ2FzZSB9IGZyb20gJy4uLy4uLy4uL2tlYmFiX2Nhc2UuanMnO1xuaW1wb3J0IHsgU2FuZGJveENvbW1hbmRHbG9iYWxPcHRpb25zIH0gZnJvbSAnLi4vb3B0aW9uX3R5cGVzLmpzJztcblxuLyoqXG4gKiBDb21tYW5kIHRvIGxpc3Qgc2FuZGJveCBzZWNyZXRzLlxuICovXG5leHBvcnQgY2xhc3MgU2FuZGJveFNlY3JldExpc3RDb21tYW5kXG4gIGltcGxlbWVudHNcbiAgICBDb21tYW5kTW9kdWxlPG9iamVjdCwgQXJndW1lbnRzS2ViYWJDYXNlPFNhbmRib3hDb21tYW5kR2xvYmFsT3B0aW9ucz4+XG57XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgY29tbWFuZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgZGVzY3JpYmU6IHN0cmluZztcblxuICAvKipcbiAgICogTGlzdCBzYW5kYm94IHNlY3JldCBjb21tYW5kLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBzYW5kYm94SWRSZXNvbHZlcjogU2FuZGJveEJhY2tlbmRJZFJlc29sdmVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2VjcmV0Q2xpZW50OiBTZWNyZXRDbGllbnRcbiAgKSB7XG4gICAgdGhpcy5jb21tYW5kID0gJ2xpc3QnO1xuICAgIHRoaXMuZGVzY3JpYmUgPSAnTGlzdCBhbGwgc2FuZGJveCBzZWNyZXRzJztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgaGFuZGxlciA9IGFzeW5jIChcbiAgICBhcmdzOiBBcmd1bWVudHNDYW1lbENhc2U8U2FuZGJveENvbW1hbmRHbG9iYWxPcHRpb25zPlxuICApOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBjb25zdCBzYW5kYm94QmFja2VuZElkZW50aWZpZXIgPSBhd2FpdCB0aGlzLnNhbmRib3hJZFJlc29sdmVyLnJlc29sdmUoXG4gICAgICBhcmdzLmlkZW50aWZpZXJcbiAgICApO1xuICAgIGNvbnN0IHNlY3JldHMgPSBhd2FpdCB0aGlzLnNlY3JldENsaWVudC5saXN0U2VjcmV0cyhcbiAgICAgIHNhbmRib3hCYWNrZW5kSWRlbnRpZmllclxuICAgICk7XG5cbiAgICBpZiAoc2VjcmV0cy5sZW5ndGggPiAwKSB7XG4gICAgICBwcmludGVyLnByaW50KGZvcm1hdC5saXN0KHNlY3JldHMubWFwKChzZWNyZXQpID0+IHNlY3JldC5uYW1lKSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcmludGVyLnByaW50KFxuICAgICAgICBgTm8gc2FuZGJveCBzZWNyZXRzIGZvdW5kLiBUbyBjcmVhdGUgYSBzZWNyZXQgdXNlICR7Zm9ybWF0LmNvbW1hbmQoXG4gICAgICAgICAgJ2FtcGxpZnkgc2FuZGJveCBzZWNyZXQgc2V0IDxzZWNyZXQtbmFtZT4nXG4gICAgICAgICl9LmBcbiAgICAgICk7XG4gICAgfVxuICAgIHByaW50ZXIucHJpbnROZXdMaW5lKCk7XG4gIH07XG59XG4iXX0=