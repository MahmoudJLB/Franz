import { ClientConfigWriter } from './client-config-writer/client_config_writer.js';
import { ClientConfigVersionOption, } from './client-config-types/client_config.js';
import { getClientConfigPath } from './paths/index.js';
import { ClientConfigMobileConverter } from './client-config-writer/client_config_to_mobile_legacy_converter.js';
import { fileURLToPath } from 'url';
import * as fsp from 'fs/promises';
import { ClientConfigFormatterLegacy } from './client-config-writer/client_config_formatter_legacy.js';
import { ClientConfigFormatterDefault } from './client-config-writer/client_config_formatter_default.js';
import { getClientConfigFileName } from './paths/get_client_config_name.js';
/**
 * Main entry point for writing provided client config to a file
 */
export const writeClientConfigToFile = async (clientConfig, version, outDir, format) => {
    const packageJson = await readPackageJson();
    const isLegacyConfig = version === ClientConfigVersionOption.V0;
    const clientConfigWriter = new ClientConfigWriter(getClientConfigPath, getClientConfigFileName, isLegacyConfig
        ? new ClientConfigFormatterLegacy(new ClientConfigMobileConverter(packageJson.name, packageJson.version))
        : new ClientConfigFormatterDefault());
    return await clientConfigWriter.writeClientConfig(clientConfig, version, outDir, format);
};
const readPackageJson = async () => {
    const packageJsonPath = fileURLToPath(new URL('../package.json', import.meta.url));
    return JSON.parse(await fsp.readFile(packageJsonPath, 'utf-8'));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JpdGVfY2xpZW50X2NvbmZpZ190b19maWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dyaXRlX2NsaWVudF9jb25maWdfdG9fZmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNwRixPQUFPLEVBSUwseUJBQXlCLEdBRTFCLE1BQU0sd0NBQXdDLENBQUM7QUFDaEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDdkQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sb0VBQW9FLENBQUM7QUFDakgsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLEtBQUssQ0FBQztBQUNwQyxPQUFPLEtBQUssR0FBRyxNQUFNLGFBQWEsQ0FBQztBQUNuQyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwwREFBMEQsQ0FBQztBQUN2RyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSwyREFBMkQsQ0FBQztBQUN6RyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUU1RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLEtBQUssRUFDMUMsWUFBMEIsRUFDMUIsT0FBNEIsRUFDNUIsTUFBZSxFQUNmLE1BQTJCLEVBQ2dCLEVBQUU7SUFDN0MsTUFBTSxXQUFXLEdBQUcsTUFBTSxlQUFlLEVBQUUsQ0FBQztJQUU1QyxNQUFNLGNBQWMsR0FBRyxPQUFPLEtBQUsseUJBQXlCLENBQUMsRUFBRSxDQUFDO0lBRWhFLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxrQkFBa0IsQ0FDL0MsbUJBQW1CLEVBQ25CLHVCQUF1QixFQUN2QixjQUFjO1FBQ1osQ0FBQyxDQUFDLElBQUksMkJBQTJCLENBQzdCLElBQUksMkJBQTJCLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQ3ZFO1FBQ0gsQ0FBQyxDQUFDLElBQUksNEJBQTRCLEVBQUUsQ0FDdkMsQ0FBQztJQUVGLE9BQU8sTUFBTSxrQkFBa0IsQ0FBQyxpQkFBaUIsQ0FDL0MsWUFBWSxFQUNaLE9BQU8sRUFDUCxNQUFNLEVBQ04sTUFBTSxDQUNQLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLGVBQWUsR0FBRyxLQUFLLElBRzFCLEVBQUU7SUFDSCxNQUFNLGVBQWUsR0FBRyxhQUFhLENBQ25DLElBQUksR0FBRyxDQUFDLGlCQUFpQixFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQzVDLENBQUM7SUFDRixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ2xFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENsaWVudENvbmZpZ1dyaXRlciB9IGZyb20gJy4vY2xpZW50LWNvbmZpZy13cml0ZXIvY2xpZW50X2NvbmZpZ193cml0ZXIuanMnO1xuaW1wb3J0IHtcbiAgQ2xpZW50Q29uZmlnLFxuICBDbGllbnRDb25maWdGb3JtYXQsXG4gIENsaWVudENvbmZpZ1ZlcnNpb24sXG4gIENsaWVudENvbmZpZ1ZlcnNpb25PcHRpb24sXG4gIEdlbmVyYXRlQ2xpZW50Q29uZmlnVG9GaWxlUmVzdWx0LFxufSBmcm9tICcuL2NsaWVudC1jb25maWctdHlwZXMvY2xpZW50X2NvbmZpZy5qcyc7XG5pbXBvcnQgeyBnZXRDbGllbnRDb25maWdQYXRoIH0gZnJvbSAnLi9wYXRocy9pbmRleC5qcyc7XG5pbXBvcnQgeyBDbGllbnRDb25maWdNb2JpbGVDb252ZXJ0ZXIgfSBmcm9tICcuL2NsaWVudC1jb25maWctd3JpdGVyL2NsaWVudF9jb25maWdfdG9fbW9iaWxlX2xlZ2FjeV9jb252ZXJ0ZXIuanMnO1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ3VybCc7XG5pbXBvcnQgKiBhcyBmc3AgZnJvbSAnZnMvcHJvbWlzZXMnO1xuaW1wb3J0IHsgQ2xpZW50Q29uZmlnRm9ybWF0dGVyTGVnYWN5IH0gZnJvbSAnLi9jbGllbnQtY29uZmlnLXdyaXRlci9jbGllbnRfY29uZmlnX2Zvcm1hdHRlcl9sZWdhY3kuanMnO1xuaW1wb3J0IHsgQ2xpZW50Q29uZmlnRm9ybWF0dGVyRGVmYXVsdCB9IGZyb20gJy4vY2xpZW50LWNvbmZpZy13cml0ZXIvY2xpZW50X2NvbmZpZ19mb3JtYXR0ZXJfZGVmYXVsdC5qcyc7XG5pbXBvcnQgeyBnZXRDbGllbnRDb25maWdGaWxlTmFtZSB9IGZyb20gJy4vcGF0aHMvZ2V0X2NsaWVudF9jb25maWdfbmFtZS5qcyc7XG5cbi8qKlxuICogTWFpbiBlbnRyeSBwb2ludCBmb3Igd3JpdGluZyBwcm92aWRlZCBjbGllbnQgY29uZmlnIHRvIGEgZmlsZVxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVDbGllbnRDb25maWdUb0ZpbGUgPSBhc3luYyAoXG4gIGNsaWVudENvbmZpZzogQ2xpZW50Q29uZmlnLFxuICB2ZXJzaW9uOiBDbGllbnRDb25maWdWZXJzaW9uLFxuICBvdXREaXI/OiBzdHJpbmcsXG4gIGZvcm1hdD86IENsaWVudENvbmZpZ0Zvcm1hdFxuKTogUHJvbWlzZTxHZW5lcmF0ZUNsaWVudENvbmZpZ1RvRmlsZVJlc3VsdD4gPT4ge1xuICBjb25zdCBwYWNrYWdlSnNvbiA9IGF3YWl0IHJlYWRQYWNrYWdlSnNvbigpO1xuXG4gIGNvbnN0IGlzTGVnYWN5Q29uZmlnID0gdmVyc2lvbiA9PT0gQ2xpZW50Q29uZmlnVmVyc2lvbk9wdGlvbi5WMDtcblxuICBjb25zdCBjbGllbnRDb25maWdXcml0ZXIgPSBuZXcgQ2xpZW50Q29uZmlnV3JpdGVyKFxuICAgIGdldENsaWVudENvbmZpZ1BhdGgsXG4gICAgZ2V0Q2xpZW50Q29uZmlnRmlsZU5hbWUsXG4gICAgaXNMZWdhY3lDb25maWdcbiAgICAgID8gbmV3IENsaWVudENvbmZpZ0Zvcm1hdHRlckxlZ2FjeShcbiAgICAgICAgICBuZXcgQ2xpZW50Q29uZmlnTW9iaWxlQ29udmVydGVyKHBhY2thZ2VKc29uLm5hbWUsIHBhY2thZ2VKc29uLnZlcnNpb24pXG4gICAgICAgIClcbiAgICAgIDogbmV3IENsaWVudENvbmZpZ0Zvcm1hdHRlckRlZmF1bHQoKVxuICApO1xuXG4gIHJldHVybiBhd2FpdCBjbGllbnRDb25maWdXcml0ZXIud3JpdGVDbGllbnRDb25maWcoXG4gICAgY2xpZW50Q29uZmlnLFxuICAgIHZlcnNpb24sXG4gICAgb3V0RGlyLFxuICAgIGZvcm1hdFxuICApO1xufTtcblxuY29uc3QgcmVhZFBhY2thZ2VKc29uID0gYXN5bmMgKCk6IFByb21pc2U8e1xuICBuYW1lOiBzdHJpbmc7XG4gIHZlcnNpb246IHN0cmluZztcbn0+ID0+IHtcbiAgY29uc3QgcGFja2FnZUpzb25QYXRoID0gZmlsZVVSTFRvUGF0aChcbiAgICBuZXcgVVJMKCcuLi9wYWNrYWdlLmpzb24nLCBpbXBvcnQubWV0YS51cmwpXG4gICk7XG4gIHJldHVybiBKU09OLnBhcnNlKGF3YWl0IGZzcC5yZWFkRmlsZShwYWNrYWdlSnNvblBhdGgsICd1dGYtOCcpKTtcbn07XG4iXX0=