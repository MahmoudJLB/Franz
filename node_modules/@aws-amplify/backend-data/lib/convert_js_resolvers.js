import { CfnFunctionConfiguration, CfnResolver } from 'aws-cdk-lib/aws-appsync';
import { resolve } from 'path';
import { fileURLToPath } from 'url';
import { Asset } from 'aws-cdk-lib/aws-s3-assets';
import { resolveEntryPath } from './resolve_entry_path.js';
const APPSYNC_PIPELINE_RESOLVER = 'PIPELINE';
const APPSYNC_JS_RUNTIME_NAME = 'APPSYNC_JS';
const APPSYNC_JS_RUNTIME_VERSION = '1.0.0';
const JS_PIPELINE_RESOLVER_HANDLER = './assets/js_resolver_handler.js';
/**
 *
 * This returns the top-level passthrough resolver request/response handler (see: https://docs.aws.amazon.com/appsync/latest/devguide/resolver-reference-overview-js.html#anatomy-of-a-pipeline-resolver-js)
 * It's required for defining a pipeline resolver. The only purpose it serves is returning the output of the last function in the pipeline back to the client.
 *
 * Customer-provided handlers are added as a Functions list in `pipelineConfig.functions`
 */
const defaultJsResolverAsset = (scope) => {
    const resolvedTemplatePath = resolve(fileURLToPath(import.meta.url), '../../lib', JS_PIPELINE_RESOLVER_HANDLER);
    return new Asset(scope, 'default_js_resolver_handler_asset', {
        path: resolveEntryPath(resolvedTemplatePath),
    });
};
/**
 * Converts JS Resolver definition emitted by data-schema into AppSync pipeline
 * resolvers via L1 construct
 */
export const convertJsResolverDefinition = (scope, amplifyApi, jsResolvers) => {
    if (!jsResolvers || jsResolvers.length < 1) {
        return;
    }
    const jsResolverTemplateAsset = defaultJsResolverAsset(scope);
    for (const resolver of jsResolvers) {
        const functions = resolver.handlers.map((handler, idx) => {
            const fnName = `Fn_${resolver.typeName}_${resolver.fieldName}_${idx + 1}`;
            const s3AssetName = `${fnName}_asset`;
            const asset = new Asset(scope, s3AssetName, {
                path: resolveEntryPath(handler.entry),
            });
            const fn = new CfnFunctionConfiguration(scope, fnName, {
                apiId: amplifyApi.apiId,
                dataSourceName: handler.dataSource,
                name: fnName,
                codeS3Location: asset.s3ObjectUrl,
                runtime: {
                    name: APPSYNC_JS_RUNTIME_NAME,
                    runtimeVersion: APPSYNC_JS_RUNTIME_VERSION,
                },
            });
            fn.node.addDependency(amplifyApi);
            return fn.attrFunctionId;
        });
        const resolverName = `Resolver_${resolver.typeName}_${resolver.fieldName}`;
        new CfnResolver(scope, resolverName, {
            apiId: amplifyApi.apiId,
            fieldName: resolver.fieldName,
            typeName: resolver.typeName,
            kind: APPSYNC_PIPELINE_RESOLVER,
            codeS3Location: jsResolverTemplateAsset.s3ObjectUrl,
            runtime: {
                name: APPSYNC_JS_RUNTIME_NAME,
                runtimeVersion: APPSYNC_JS_RUNTIME_VERSION,
            },
            pipelineConfig: {
                functions,
            },
        }).node.addDependency(amplifyApi);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVydF9qc19yZXNvbHZlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY29udmVydF9qc19yZXNvbHZlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLHdCQUF3QixFQUFFLFdBQVcsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRWhGLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLEtBQUssQ0FBQztBQUNwQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFM0QsTUFBTSx5QkFBeUIsR0FBRyxVQUFVLENBQUM7QUFDN0MsTUFBTSx1QkFBdUIsR0FBRyxZQUFZLENBQUM7QUFDN0MsTUFBTSwwQkFBMEIsR0FBRyxPQUFPLENBQUM7QUFDM0MsTUFBTSw0QkFBNEIsR0FBRyxpQ0FBaUMsQ0FBQztBQUV2RTs7Ozs7O0dBTUc7QUFDSCxNQUFNLHNCQUFzQixHQUFHLENBQUMsS0FBZ0IsRUFBUyxFQUFFO0lBQ3pELE1BQU0sb0JBQW9CLEdBQUcsT0FBTyxDQUNsQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFDOUIsV0FBVyxFQUNYLDRCQUE0QixDQUM3QixDQUFDO0lBRUYsT0FBTyxJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUUsbUNBQW1DLEVBQUU7UUFDM0QsSUFBSSxFQUFFLGdCQUFnQixDQUFDLG9CQUFvQixDQUFDO0tBQzdDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUVGOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFHLENBQ3pDLEtBQWdCLEVBQ2hCLFVBQXVCLEVBQ3ZCLFdBQXFDLEVBQy9CLEVBQUU7SUFDUixJQUFJLENBQUMsV0FBVyxJQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzFDLE9BQU87S0FDUjtJQUVELE1BQU0sdUJBQXVCLEdBQUcsc0JBQXNCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFOUQsS0FBSyxNQUFNLFFBQVEsSUFBSSxXQUFXLEVBQUU7UUFDbEMsTUFBTSxTQUFTLEdBQWEsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDakUsTUFBTSxNQUFNLEdBQUcsTUFBTSxRQUFRLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxTQUFTLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQzFFLE1BQU0sV0FBVyxHQUFHLEdBQUcsTUFBTSxRQUFRLENBQUM7WUFFdEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRTtnQkFDMUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7YUFDdEMsQ0FBQyxDQUFDO1lBRUgsTUFBTSxFQUFFLEdBQUcsSUFBSSx3QkFBd0IsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFO2dCQUNyRCxLQUFLLEVBQUUsVUFBVSxDQUFDLEtBQUs7Z0JBQ3ZCLGNBQWMsRUFBRSxPQUFPLENBQUMsVUFBVTtnQkFDbEMsSUFBSSxFQUFFLE1BQU07Z0JBQ1osY0FBYyxFQUFFLEtBQUssQ0FBQyxXQUFXO2dCQUNqQyxPQUFPLEVBQUU7b0JBQ1AsSUFBSSxFQUFFLHVCQUF1QjtvQkFDN0IsY0FBYyxFQUFFLDBCQUEwQjtpQkFDM0M7YUFDRixDQUFDLENBQUM7WUFDSCxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNsQyxPQUFPLEVBQUUsQ0FBQyxjQUFjLENBQUM7UUFDM0IsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLFlBQVksR0FBRyxZQUFZLFFBQVEsQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRTNFLElBQUksV0FBVyxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUU7WUFDbkMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxLQUFLO1lBQ3ZCLFNBQVMsRUFBRSxRQUFRLENBQUMsU0FBUztZQUM3QixRQUFRLEVBQUUsUUFBUSxDQUFDLFFBQVE7WUFDM0IsSUFBSSxFQUFFLHlCQUF5QjtZQUMvQixjQUFjLEVBQUUsdUJBQXVCLENBQUMsV0FBVztZQUNuRCxPQUFPLEVBQUU7Z0JBQ1AsSUFBSSxFQUFFLHVCQUF1QjtnQkFDN0IsY0FBYyxFQUFFLDBCQUEwQjthQUMzQztZQUNELGNBQWMsRUFBRTtnQkFDZCxTQUFTO2FBQ1Y7U0FDRixDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUNuQztBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgQW1wbGlmeURhdGEgfSBmcm9tICdAYXdzLWFtcGxpZnkvZGF0YS1jb25zdHJ1Y3QnO1xuaW1wb3J0IHsgQ2ZuRnVuY3Rpb25Db25maWd1cmF0aW9uLCBDZm5SZXNvbHZlciB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1hcHBzeW5jJztcbmltcG9ydCB7IEpzUmVzb2x2ZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvZGF0YS1zY2hlbWEtdHlwZXMnO1xuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ3VybCc7XG5pbXBvcnQgeyBBc3NldCB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1zMy1hc3NldHMnO1xuaW1wb3J0IHsgcmVzb2x2ZUVudHJ5UGF0aCB9IGZyb20gJy4vcmVzb2x2ZV9lbnRyeV9wYXRoLmpzJztcblxuY29uc3QgQVBQU1lOQ19QSVBFTElORV9SRVNPTFZFUiA9ICdQSVBFTElORSc7XG5jb25zdCBBUFBTWU5DX0pTX1JVTlRJTUVfTkFNRSA9ICdBUFBTWU5DX0pTJztcbmNvbnN0IEFQUFNZTkNfSlNfUlVOVElNRV9WRVJTSU9OID0gJzEuMC4wJztcbmNvbnN0IEpTX1BJUEVMSU5FX1JFU09MVkVSX0hBTkRMRVIgPSAnLi9hc3NldHMvanNfcmVzb2x2ZXJfaGFuZGxlci5qcyc7XG5cbi8qKlxuICpcbiAqIFRoaXMgcmV0dXJucyB0aGUgdG9wLWxldmVsIHBhc3N0aHJvdWdoIHJlc29sdmVyIHJlcXVlc3QvcmVzcG9uc2UgaGFuZGxlciAoc2VlOiBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vYXBwc3luYy9sYXRlc3QvZGV2Z3VpZGUvcmVzb2x2ZXItcmVmZXJlbmNlLW92ZXJ2aWV3LWpzLmh0bWwjYW5hdG9teS1vZi1hLXBpcGVsaW5lLXJlc29sdmVyLWpzKVxuICogSXQncyByZXF1aXJlZCBmb3IgZGVmaW5pbmcgYSBwaXBlbGluZSByZXNvbHZlci4gVGhlIG9ubHkgcHVycG9zZSBpdCBzZXJ2ZXMgaXMgcmV0dXJuaW5nIHRoZSBvdXRwdXQgb2YgdGhlIGxhc3QgZnVuY3Rpb24gaW4gdGhlIHBpcGVsaW5lIGJhY2sgdG8gdGhlIGNsaWVudC5cbiAqXG4gKiBDdXN0b21lci1wcm92aWRlZCBoYW5kbGVycyBhcmUgYWRkZWQgYXMgYSBGdW5jdGlvbnMgbGlzdCBpbiBgcGlwZWxpbmVDb25maWcuZnVuY3Rpb25zYFxuICovXG5jb25zdCBkZWZhdWx0SnNSZXNvbHZlckFzc2V0ID0gKHNjb3BlOiBDb25zdHJ1Y3QpOiBBc3NldCA9PiB7XG4gIGNvbnN0IHJlc29sdmVkVGVtcGxhdGVQYXRoID0gcmVzb2x2ZShcbiAgICBmaWxlVVJMVG9QYXRoKGltcG9ydC5tZXRhLnVybCksXG4gICAgJy4uLy4uL2xpYicsXG4gICAgSlNfUElQRUxJTkVfUkVTT0xWRVJfSEFORExFUlxuICApO1xuXG4gIHJldHVybiBuZXcgQXNzZXQoc2NvcGUsICdkZWZhdWx0X2pzX3Jlc29sdmVyX2hhbmRsZXJfYXNzZXQnLCB7XG4gICAgcGF0aDogcmVzb2x2ZUVudHJ5UGF0aChyZXNvbHZlZFRlbXBsYXRlUGF0aCksXG4gIH0pO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBKUyBSZXNvbHZlciBkZWZpbml0aW9uIGVtaXR0ZWQgYnkgZGF0YS1zY2hlbWEgaW50byBBcHBTeW5jIHBpcGVsaW5lXG4gKiByZXNvbHZlcnMgdmlhIEwxIGNvbnN0cnVjdFxuICovXG5leHBvcnQgY29uc3QgY29udmVydEpzUmVzb2x2ZXJEZWZpbml0aW9uID0gKFxuICBzY29wZTogQ29uc3RydWN0LFxuICBhbXBsaWZ5QXBpOiBBbXBsaWZ5RGF0YSxcbiAganNSZXNvbHZlcnM6IEpzUmVzb2x2ZXJbXSB8IHVuZGVmaW5lZFxuKTogdm9pZCA9PiB7XG4gIGlmICghanNSZXNvbHZlcnMgfHwganNSZXNvbHZlcnMubGVuZ3RoIDwgMSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGpzUmVzb2x2ZXJUZW1wbGF0ZUFzc2V0ID0gZGVmYXVsdEpzUmVzb2x2ZXJBc3NldChzY29wZSk7XG5cbiAgZm9yIChjb25zdCByZXNvbHZlciBvZiBqc1Jlc29sdmVycykge1xuICAgIGNvbnN0IGZ1bmN0aW9uczogc3RyaW5nW10gPSByZXNvbHZlci5oYW5kbGVycy5tYXAoKGhhbmRsZXIsIGlkeCkgPT4ge1xuICAgICAgY29uc3QgZm5OYW1lID0gYEZuXyR7cmVzb2x2ZXIudHlwZU5hbWV9XyR7cmVzb2x2ZXIuZmllbGROYW1lfV8ke2lkeCArIDF9YDtcbiAgICAgIGNvbnN0IHMzQXNzZXROYW1lID0gYCR7Zm5OYW1lfV9hc3NldGA7XG5cbiAgICAgIGNvbnN0IGFzc2V0ID0gbmV3IEFzc2V0KHNjb3BlLCBzM0Fzc2V0TmFtZSwge1xuICAgICAgICBwYXRoOiByZXNvbHZlRW50cnlQYXRoKGhhbmRsZXIuZW50cnkpLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGZuID0gbmV3IENmbkZ1bmN0aW9uQ29uZmlndXJhdGlvbihzY29wZSwgZm5OYW1lLCB7XG4gICAgICAgIGFwaUlkOiBhbXBsaWZ5QXBpLmFwaUlkLFxuICAgICAgICBkYXRhU291cmNlTmFtZTogaGFuZGxlci5kYXRhU291cmNlLFxuICAgICAgICBuYW1lOiBmbk5hbWUsXG4gICAgICAgIGNvZGVTM0xvY2F0aW9uOiBhc3NldC5zM09iamVjdFVybCxcbiAgICAgICAgcnVudGltZToge1xuICAgICAgICAgIG5hbWU6IEFQUFNZTkNfSlNfUlVOVElNRV9OQU1FLFxuICAgICAgICAgIHJ1bnRpbWVWZXJzaW9uOiBBUFBTWU5DX0pTX1JVTlRJTUVfVkVSU0lPTixcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgICAgZm4ubm9kZS5hZGREZXBlbmRlbmN5KGFtcGxpZnlBcGkpO1xuICAgICAgcmV0dXJuIGZuLmF0dHJGdW5jdGlvbklkO1xuICAgIH0pO1xuXG4gICAgY29uc3QgcmVzb2x2ZXJOYW1lID0gYFJlc29sdmVyXyR7cmVzb2x2ZXIudHlwZU5hbWV9XyR7cmVzb2x2ZXIuZmllbGROYW1lfWA7XG5cbiAgICBuZXcgQ2ZuUmVzb2x2ZXIoc2NvcGUsIHJlc29sdmVyTmFtZSwge1xuICAgICAgYXBpSWQ6IGFtcGxpZnlBcGkuYXBpSWQsXG4gICAgICBmaWVsZE5hbWU6IHJlc29sdmVyLmZpZWxkTmFtZSxcbiAgICAgIHR5cGVOYW1lOiByZXNvbHZlci50eXBlTmFtZSxcbiAgICAgIGtpbmQ6IEFQUFNZTkNfUElQRUxJTkVfUkVTT0xWRVIsXG4gICAgICBjb2RlUzNMb2NhdGlvbjoganNSZXNvbHZlclRlbXBsYXRlQXNzZXQuczNPYmplY3RVcmwsXG4gICAgICBydW50aW1lOiB7XG4gICAgICAgIG5hbWU6IEFQUFNZTkNfSlNfUlVOVElNRV9OQU1FLFxuICAgICAgICBydW50aW1lVmVyc2lvbjogQVBQU1lOQ19KU19SVU5USU1FX1ZFUlNJT04sXG4gICAgICB9LFxuICAgICAgcGlwZWxpbmVDb25maWc6IHtcbiAgICAgICAgZnVuY3Rpb25zLFxuICAgICAgfSxcbiAgICB9KS5ub2RlLmFkZERlcGVuZGVuY3koYW1wbGlmeUFwaSk7XG4gIH1cbn07XG4iXX0=